/* The following code was generated by JFlex 1.4.3 on 11/4/15 2:09 PM */

package  com.demo;

import  com.intellij.lexer.FlexLexer ;
import  com.intellij.psi.tree.IElementType ;
import  com.demo.psi.PurescriptTypes ;
import  com.intellij.psi.TokenType ;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/4/15 2:09 PM from the specification file
 * <tt>/Users/esmith/projects/intellij-purescript/src/com/demo/Purescript.flex</tt>
 */
class PurescriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 6;
  public static final int YYINITIAL = 0;
  public static final int TEX = 4;
  public static final int NCOMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\5\1\2\22\0\1\5\1\7\1\46"+
    "\1\6\1\30\1\0\1\30\1\27\1\40\1\41\1\30\1\30\1\42"+
    "\1\11\1\31\1\30\12\26\1\10\1\0\1\32\1\34\1\33\1\30"+
    "\1\35\32\25\1\43\1\4\1\44\1\30\1\37\1\45\1\60\1\12"+
    "\1\20\1\22\1\13\1\62\1\14\1\53\1\15\2\24\1\51\1\47"+
    "\1\16\1\21\1\55\1\63\1\54\1\61\1\56\1\50\1\24\1\52"+
    "\1\24\1\57\1\24\1\17\1\36\1\23\1\30\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\5\4\11\1\12\3\11\1\13\1\14\1\15"+
    "\1\5\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\2\6\11\4\31"+
    "\2\1\2\2\1\32\1\33\1\34\2\11\1\35\2\11"+
    "\1\36\1\11\1\37\1\40\1\11\1\14\1\41\1\42"+
    "\1\43\1\0\1\44\1\0\7\11\1\45\1\46\1\1"+
    "\2\0\4\11\2\47\3\11\1\50\5\11\2\45\2\46"+
    "\2\0\1\51\4\11\1\52\2\11\1\53\1\54\3\11"+
    "\2\0\3\11\1\55\1\11\1\56\3\11\2\0\1\11"+
    "\1\57\1\11\1\60\1\11\1\61\1\11\2\0\1\11"+
    "\1\62\1\63\1\11\2\0\1\64\1\11\2\0\1\65"+
    "\5\0\1\7\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\234\0\320\0\u0104\0\u0138"+
    "\0\u0104\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\234\0\u03a8\0\234\0\u03dc"+
    "\0\234\0\u0410\0\u0444\0\u03dc\0\u03dc\0\u0208\0\234\0\234"+
    "\0\234\0\234\0\234\0\234\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\234\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\234\0\234\0\u03dc\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u0208\0\u0208\0\u08bc"+
    "\0\u08f0\0\u03dc\0\u03dc\0\u03dc\0\u0478\0\234\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\234"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0208\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\234\0\u0e6c\0\234\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0208\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u0208\0\u100c\0\u1040"+
    "\0\u0208\0\u0208\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u0208\0\u1214\0\u0208\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u0208\0\u1380\0\u0208\0\u13b4\0\u0208"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u0208\0\u0208\0\u14b8\0\u14ec"+
    "\0\u1520\0\u0208\0\u1554\0\u1588\0\u15bc\0\u0208\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\234\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\15\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\15\1\26\1\4\1\27\1\30"+
    "\1\31\1\32\1\30\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\15"+
    "\1\47\1\50\3\15\1\51\3\15\1\52\1\53\2\54"+
    "\1\55\6\54\1\56\5\54\1\57\44\54\4\60\1\61"+
    "\57\60\65\0\1\5\65\0\1\11\1\0\1\11\56\0"+
    "\2\4\1\62\1\4\1\30\1\4\4\30\1\63\15\4"+
    "\7\30\25\4\1\12\2\0\61\12\10\0\1\64\57\0"+
    "\1\30\1\0\3\30\1\12\11\0\1\65\4\0\3\30"+
    "\1\66\3\30\33\0\1\67\3\0\5\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\15\15\6\0\1\67"+
    "\3\0\5\15\1\0\3\15\1\0\4\15\7\0\1\15"+
    "\7\0\2\15\1\70\12\15\6\0\1\67\3\0\4\15"+
    "\1\71\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\1\72\14\15\6\0\1\67\3\0\1\15\1\73\3\15"+
    "\1\0\3\15\1\0\4\15\7\0\1\15\7\0\15\15"+
    "\11\0\1\74\60\0\1\67\3\0\5\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\2\15\1\75\12\15"+
    "\6\0\1\67\3\0\5\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\13\15\1\76\1\15\6\0\1\67"+
    "\3\0\5\15\1\0\1\15\1\77\1\15\1\0\4\15"+
    "\7\0\1\15\7\0\11\15\1\100\3\15\6\0\1\101"+
    "\3\0\5\26\1\0\3\26\1\0\4\26\7\0\1\26"+
    "\7\0\15\26\4\0\1\30\1\0\4\30\16\0\7\30"+
    "\31\0\1\30\1\0\3\30\1\102\16\0\4\30\1\103"+
    "\2\30\31\0\1\30\1\0\4\30\16\0\3\30\1\104"+
    "\3\30\25\0\1\105\1\106\2\105\1\107\41\105\1\106"+
    "\15\105\6\0\1\67\3\0\5\15\1\0\1\15\1\110"+
    "\1\15\1\0\4\15\7\0\1\15\7\0\15\15\6\0"+
    "\1\67\3\0\1\15\1\111\3\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\15\15\6\0\1\67\3\0"+
    "\5\15\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\4\15\1\112\10\15\6\0\1\67\3\0\5\15\1\0"+
    "\3\15\1\0\4\15\7\0\1\15\7\0\4\15\1\113"+
    "\3\15\1\114\4\15\6\0\1\67\3\0\5\15\1\0"+
    "\1\15\1\115\1\15\1\0\4\15\7\0\1\15\7\0"+
    "\15\15\6\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\1\15\1\116\13\15\1\0"+
    "\1\54\105\0\1\117\51\0\1\120\52\0\4\60\1\0"+
    "\57\60\4\0\1\121\5\0\1\122\52\0\1\4\75\0"+
    "\1\123\56\0\1\67\63\0\1\67\3\0\5\15\1\0"+
    "\3\15\1\0\4\15\7\0\1\15\7\0\12\15\1\124"+
    "\2\15\6\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\12\15\1\125\2\15\6\0"+
    "\1\67\3\0\5\15\1\0\3\15\1\0\4\15\7\0"+
    "\1\15\7\0\6\15\1\126\6\15\6\0\1\67\3\0"+
    "\5\15\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\3\15\1\127\11\15\1\0\1\130\1\131\1\130\1\0"+
    "\1\130\3\0\6\130\1\0\3\130\1\0\3\130\7\0"+
    "\2\130\7\0\15\130\6\0\1\67\3\0\5\15\1\0"+
    "\3\15\1\0\4\15\7\0\1\15\7\0\11\15\1\132"+
    "\3\15\6\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\7\15\1\133\5\15\6\0"+
    "\1\101\56\0\3\107\1\105\1\107\64\0\1\67\3\0"+
    "\5\15\1\0\2\15\1\134\1\0\4\15\7\0\1\15"+
    "\7\0\15\15\6\0\1\67\3\0\5\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\7\15\1\135\5\15"+
    "\6\0\1\67\3\0\1\15\1\136\3\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\15\15\6\0\1\67"+
    "\3\0\1\15\1\137\3\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\15\15\6\0\1\67\3\0\5\15"+
    "\1\0\3\15\1\0\4\15\7\0\1\15\7\0\6\15"+
    "\1\140\6\15\6\0\1\67\3\0\5\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\5\15\1\141\7\15"+
    "\6\0\1\67\3\0\5\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\11\15\1\142\3\15\1\0\1\143"+
    "\1\144\62\0\1\145\1\146\1\145\1\0\1\145\3\0"+
    "\6\145\1\0\3\145\1\0\3\145\7\0\2\145\7\0"+
    "\15\145\4\0\1\121\72\0\1\147\64\0\1\150\55\0"+
    "\1\67\3\0\1\15\1\151\3\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\15\15\6\0\1\67\3\0"+
    "\5\15\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\7\15\1\152\5\15\6\0\1\67\3\0\5\15\1\0"+
    "\1\15\1\153\1\15\1\0\4\15\7\0\1\15\7\0"+
    "\15\15\6\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\7\15\1\154\5\15\1\0"+
    "\1\130\70\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\12\15\1\155\2\15\6\0"+
    "\1\67\3\0\5\15\1\0\3\15\1\0\4\15\7\0"+
    "\1\15\7\0\11\15\1\156\3\15\6\0\1\67\3\0"+
    "\5\15\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\1\15\1\157\13\15\6\0\1\67\3\0\5\15\1\0"+
    "\3\15\1\0\4\15\7\0\1\15\7\0\5\15\1\160"+
    "\7\15\6\0\1\67\3\0\4\15\1\161\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\15\15\6\0\1\67"+
    "\3\0\1\15\1\162\3\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\15\15\6\0\1\67\3\0\1\15"+
    "\1\163\3\15\1\0\3\15\1\0\4\15\7\0\1\15"+
    "\7\0\11\15\1\164\3\15\6\0\1\67\3\0\5\15"+
    "\1\0\3\15\1\0\4\15\7\0\1\15\7\0\2\15"+
    "\1\165\12\15\1\0\1\143\63\0\1\145\76\0\1\166"+
    "\64\0\1\167\54\0\1\67\3\0\5\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\11\15\1\170\3\15"+
    "\6\0\1\67\3\0\5\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\5\15\1\171\7\15\6\0\1\67"+
    "\3\0\5\15\1\0\3\15\1\0\4\15\7\0\1\15"+
    "\7\0\10\15\1\172\4\15\6\0\1\67\3\0\5\15"+
    "\1\0\3\15\1\0\4\15\7\0\1\15\7\0\12\15"+
    "\1\173\2\15\6\0\1\67\3\0\5\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\2\15\1\174\12\15"+
    "\6\0\1\67\3\0\1\15\1\175\3\15\1\0\3\15"+
    "\1\0\4\15\7\0\1\15\7\0\15\15\6\0\1\67"+
    "\3\0\3\15\1\176\1\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\15\15\6\0\1\67\3\0\5\15"+
    "\1\0\3\15\1\0\4\15\7\0\1\15\7\0\2\15"+
    "\1\177\12\15\6\0\1\67\3\0\3\15\1\200\1\15"+
    "\1\0\3\15\1\0\4\15\7\0\1\15\7\0\15\15"+
    "\15\0\1\201\64\0\1\202\53\0\1\67\3\0\4\15"+
    "\1\203\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\15\15\6\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\7\15\1\204\5\15\6\0"+
    "\1\67\3\0\5\15\1\0\3\15\1\0\4\15\7\0"+
    "\1\15\7\0\6\15\1\205\6\15\6\0\1\67\3\0"+
    "\1\15\1\206\3\15\1\0\3\15\1\0\4\15\7\0"+
    "\1\15\7\0\15\15\6\0\1\67\3\0\2\15\1\207"+
    "\2\15\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\15\15\6\0\1\67\3\0\5\15\1\0\3\15\1\0"+
    "\4\15\7\0\1\15\7\0\2\15\1\210\12\15\6\0"+
    "\1\67\3\0\5\15\1\0\3\15\1\0\4\15\7\0"+
    "\1\15\7\0\13\15\1\211\1\15\16\0\1\212\64\0"+
    "\1\213\52\0\1\67\3\0\5\15\1\0\1\214\2\15"+
    "\1\0\4\15\7\0\1\15\7\0\15\15\6\0\1\67"+
    "\3\0\1\15\1\215\3\15\1\0\3\15\1\0\4\15"+
    "\7\0\1\15\7\0\15\15\6\0\1\67\3\0\4\15"+
    "\1\216\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\15\15\6\0\1\67\3\0\3\15\1\217\1\15\1\0"+
    "\3\15\1\0\4\15\7\0\1\15\7\0\15\15\17\0"+
    "\1\220\64\0\1\221\51\0\1\67\3\0\1\15\1\222"+
    "\3\15\1\0\3\15\1\0\4\15\7\0\1\15\7\0"+
    "\15\15\6\0\1\67\3\0\1\15\1\223\3\15\1\0"+
    "\3\15\1\0\4\15\7\0\1\15\7\0\15\15\20\0"+
    "\1\224\64\0\1\225\50\0\1\67\3\0\5\15\1\0"+
    "\2\15\1\226\1\0\4\15\7\0\1\15\7\0\15\15"+
    "\21\0\1\227\64\0\1\230\63\0\1\231\54\0\1\232"+
    "\63\0\1\233\73\0\1\234\63\0\1\235\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\11\17\1\1\11\1\1\1\11\1\1"+
    "\1\11\5\1\6\11\7\1\1\11\7\1\2\11\17\1"+
    "\1\0\1\11\1\0\12\1\2\0\4\1\1\11\12\1"+
    "\1\11\1\1\1\11\1\1\2\0\15\1\2\0\11\1"+
    "\2\0\7\1\2\0\4\1\2\0\2\1\2\0\1\1"+
    "\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PurescriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { return PurescriptTypes.PS_THEN;
          }
        case 55: break;
        case 42: 
          { return PurescriptTypes.PS_DATA;
          }
        case 56: break;
        case 8: 
          { return PurescriptTypes.PS_SEPARATOR;
          }
        case 57: break;
        case 10: 
          { return PurescriptTypes.PS_LEFT_BRACE;
          }
        case 58: break;
        case 50: 
          { return PurescriptTypes.PS_NEWTYPE;
          }
        case 59: break;
        case 41: 
          { return PurescriptTypes.PS_ELSE;
          }
        case 60: break;
        case 7: 
          { return PurescriptTypes.PS_COMMENT;
          }
        case 61: break;
        case 27: 
          { return PurescriptTypes.PS_NCOMMENT_END;
          }
        case 62: break;
        case 36: 
          { return PurescriptTypes.PS_STRING;
          }
        case 63: break;
        case 48: 
          { return PurescriptTypes.PS_MODULE;
          }
        case 64: break;
        case 44: 
          { return PurescriptTypes.PS_TYPEID;
          }
        case 65: break;
        case 12: 
          { return PurescriptTypes.PS_CONID;
          }
        case 66: break;
        case 52: 
          { return PurescriptTypes.PS_INSTANCE;
          }
        case 67: break;
        case 17: 
          { return PurescriptTypes.PS_VERTICAL_BAR;
          }
        case 68: break;
        case 2: 
          { return PurescriptTypes.PS_KEY;
          }
        case 69: break;
        case 33: 
          { return PurescriptTypes.PS_LEFT_ARROW;
          }
        case 70: break;
        case 35: 
          { return PurescriptTypes.PS_DOUBLE_RIGHT_ARROW;
          }
        case 71: break;
        case 4: 
          { return PurescriptTypes.PS_VALUE;
          }
        case 72: break;
        case 40: 
          { return PurescriptTypes.PS_LET;
          }
        case 73: break;
        case 21: 
          { return PurescriptTypes.PS_COMMA;
          }
        case 74: break;
        case 24: 
          { return PurescriptTypes.PS_BACKTICK;
          }
        case 75: break;
        case 46: 
          { return PurescriptTypes.PS_WHERE;
          }
        case 76: break;
        case 31: 
          { return PurescriptTypes.PS_OF;
          }
        case 77: break;
        case 26: 
          { return PurescriptTypes.PS_COLON_COLON;
          }
        case 78: break;
        case 16: 
          { return PurescriptTypes.PS_AT;
          }
        case 79: break;
        case 9: 
          { return PurescriptTypes.PS_VARID;
          }
        case 80: break;
        case 20: 
          { return PurescriptTypes.PS_RIGHT_PAREN;
          }
        case 81: break;
        case 29: 
          { return PurescriptTypes.PS_IN;
          }
        case 82: break;
        case 53: 
          { return PurescriptTypes.PS_QUALIFIED;
          }
        case 83: break;
        case 51: 
          { return PurescriptTypes.PS_FOREIGN;
          }
        case 84: break;
        case 23: 
          { return PurescriptTypes.PS_RIGHT_BRACKET;
          }
        case 85: break;
        case 13: 
          { return PurescriptTypes.PS_QUOTE;
          }
        case 86: break;
        case 6: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 87: break;
        case 45: 
          { return PurescriptTypes.PS_CLASS;
          }
        case 88: break;
        case 30: 
          { return PurescriptTypes.PS_NCOMMENT_START;
          }
        case 89: break;
        case 3: 
          { yybegin ( YYINITIAL );  return  PurescriptTypes.PS_NEWLINE ;
          }
        case 90: break;
        case 18: 
          { return PurescriptTypes.PS_UNDERSCORE;
          }
        case 91: break;
        case 39: 
          { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 92: break;
        case 38: 
          { commentDepth++;
          }
        case 93: break;
        case 1: 
          { return PurescriptTypes.PS_NCOMMENT;
          }
        case 94: break;
        case 32: 
          { return PurescriptTypes.PS_DO;
          }
        case 95: break;
        case 34: 
          { return PurescriptTypes.PS_DOUBLE_LEFT_ARROW;
          }
        case 96: break;
        case 11: 
          { return PurescriptTypes.PS_RIGHT_BRACE;
          }
        case 97: break;
        case 19: 
          { return PurescriptTypes.PS_LEFT_PAREN;
          }
        case 98: break;
        case 37: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return PurescriptTypes.PS_NCOMMENT;
        }
          }
        case 99: break;
        case 47: 
          { return PurescriptTypes.PS_IMPORT;
          }
        case 100: break;
        case 5: 
          { return PurescriptTypes.PS_VARSYMID;
          }
        case 101: break;
        case 14: 
          { return PurescriptTypes.PS_DOT;
          }
        case 102: break;
        case 15: 
          { return PurescriptTypes.PS_EQUAL;
          }
        case 103: break;
        case 49: 
          { return PurescriptTypes.PS_FORALL;
          }
        case 104: break;
        case 22: 
          { return PurescriptTypes.PS_LEFT_BRACKET;
          }
        case 105: break;
        case 54: 
          { yybegin(YYINITIAL); return PurescriptTypes.PS_NCOMMENT;
          }
        case 106: break;
        case 28: 
          { return PurescriptTypes.PS_RIGHT_ARROW;
          }
        case 107: break;
        case 25: 
          { 
          }
        case 108: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return PurescriptTypes.PS_NCOMMENT;
            }
            case 158: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
